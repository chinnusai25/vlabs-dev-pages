#+Title:  Virtual Labs Hosting Process
#+Author: VLEAD
#+Email: engg@vlabs.ac.in
#+DATE: [2020-01-08 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+LANGUAGE: en
#+OPTIONS: ^:nil
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t
#+OPTIONS: arch:headline author:t broken-links:nil c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil
#+OPTIONS: prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.3.2 (Org mode 9.1.9)

* Introduction
  [[http://vlab.co.in][Virtual Labs]] are labs for online learning in science and
  engineering at the college level.  Currently there are
  around 90 labs developed by various institutes in the
  consortium.  The Virtual Labs project is funded by the
  Govt. of India, Ministry of Human Resources and
  Development Project.  


* Purpose

  The virtual labs are built through the effort of many free
  and open source development teams.  You can find the
  source repositories of many of the labs on the [[https://github.com/virtual-labs/][Github
  Virtual Labs]].  The labs are currently being centrally
  hosted on a cloud environment by the Virtual Labs Central
  Platform Engineering (CPE) team at IIIT Hyderabad.

  This document defines the process that you need to follow
  to have your lab hosted once your lab with the Platform
  Engineering and Hosting.

* Motivation

  A well defined experiment hosting enables experiment
  authors to focus on developing the content.  Consolidated
  information regarding all the deployments also facilitates
  accurate reporting of usage and basic performance
  parameters.

* Audience
  The target audience for this document is the hosting team
  at CPE, IIITH and all the lab authors and owners who want
  their labs hosted.


* What Hosting is, and isn't

** What hosting is

   Hosting consists of

   - 1. Infrastructure :: You lab/experiment will be hosted
        on a cloud and all dependencies required to run your
        experiment or lab will be provisioned as well. 
   
   - 2. Availability :: Your lab/experiment will be
        available on the web 24/7.
   
   - 3. Monitoring ::  The usage and performance of your
                      lab/experiment will be monitored and
                      any you will be alerted about any
                      performance bottlenecks in your
                      lab/experiment.

** What hosting isn't

   - 1. Testing :: The experiment code is a black box for
                   the CPE team and will be hosted `as is'
                   after instrumenting it for analytics.
                   Your lab's source code will not be tested
                   in any way!  You will be responsible for
                   ensuring that the content and the
                   simulations in your lab perform as
                   intended.  You will be asked to confirm
                   that your lab is functioning correctly
                   once it is hosted.

   - 2. Implementation ::  Your code may have bugs.  Any bug
        fixes or enhancements or implementation on the
        Lab/Experiment will be done by you.  The hosting
        team will not be able to do this.  The hosting team
        will, however, monitor the performance of your lab
        or experiment.

   - 3. Approvals :: If you need any approval for quality
                     checks of your lab, you will need to do
                     that yourself.  We have no way of
                     obtaining it. 

** Hosting terminology

   - 1. Vlabs Hosting Team :: the primary team responsible
        for hosting.  

   - 2. Github :: the platform through which hosting
                  requests will be initiated and mediated. 

   - 3. [[https://github.com/virtual-labs/engineers-forum/issues][=engineers-forum=]] :: An online issue portal on
        =GitHub= that holds all communication related to
        hosting requests, including the request itself,
        status confirming the  hosting or its failure and
        any subsequent clarifications, etc.

   - 4. Hosting Unit  :: An experiment or lab that is to be
        hosted.  Each hosting unit refers to a source
        repository and an owner.

   - 5. Repository :: The public repository (usually on
                      GitHub) that holds the sources of the
                      hosting unit.

   - 6. (Designated) Owner :: The person that Vlabs hosting
        team will communicate with for hosting of the
        lab/experiment.  The lab owner is identified by a
        *GitHub id*.  The owner need not be an individual.
        It could be an Github account operating by a
        development team, for example.

   - 7. Requester :: Anyone (including the owner) who makes
                     a lab hosting request on behalf of the
                     Owner.  Any such request will need to
                     be approved by the Owner.

* Registering and making  a hosting request
** Registering a Request 

   The owner first registers his/her intent to have a
   particular experiment or lab hosted from a given source
   repository.

   Every registration request is an issue on the
   [[https://github.com/virtual-labs/engineers-forum][engineers-forum]].  The template for registration is
   available on the [[https://github.com/virtual-labs/engineers-forum/issues/new/choose][issues template page]] on the
   engineers-forum.  The template expects the following
   information:

  1. A name for the hosting unit.  (E.g., "Fluid Mechanics
     Lab")
     
  2. URL of the source code repository of the hosting unit.

  3. Owner details:

     a. Owner Github Id

     b. Owner Email Address

** COMMENT Filling the lab/experiment descriptor 

The sources of the lab/experiment you wish to host, The
lab/experiment descriptor =descriptor.json= is available
[[https://github.com/virtual-labs/lab-deployment-specification/blob/master/spec-version-2.0][here]].  Default values of fields in the descriptor are filled
in.


** Making the Hosting request

A requester creates a '[[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting request]]' issue on the
[[https://github.com/virtual-labs/engineers-forum][engineers-forum]].  This issue will be a single source of
truth for that hosting request.  All communication related
to the hosting will be recorded on the raised hosting
request.  So it is best to [[https://help.github.com/en/enterprise/2.20/user/github/receiving-notifications-about-activity-on-github/subscribing-to-and-unsubscribing-from-notifications][subscribe to this issue]] to
receive notifications when your request is handled.

The request needs to have the following information:

  1. A link to the URL of the registration request.  The
     [[https://github.com/virtual-labs/engineers-forum/issues][engineers-forum issues]] page contains a list of all
     requests.

  2. The branch of the source repository.  (Defaults to
     =master= if unspecified.)

  3. The tag on the branch.  (See [[How to tag branches]].)


* Lifecycle of a hosting request
** Lifecycle of a Hosting Request
    
    The hosting request will go through the following
    lifecycle:

    1. Requester will raise a hosting request issue by
       filling the '[[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting request]]'.

    2. The hosting team will attach the url of the
       corresponding registration request to the hosting
       request.  If the registation request is not found or
       invalid, then the hosting team will add its findings
       and label the issue as *Failed*.

    3. If requester is not the repository owner, the
       hosting team will seek approval from the repository
       owner.  This will be through replying to the hosting
       request issue and marking the owner for
       confirmation.   

    4. The owner replies to the hosting request issue
       granting approval.  Else, the hosting request issue
       will be labeled as *Not Approved*.

    5.  On a successful hosting, the hosting team will add
       the link of the newly hosted content to the hosting
       request issue.  They will also label the issue as
       *Hosted*.

    6.  On failure (because of missing or incorrect
       information or repository problems,), the hosting
       team will label the issue as *Failed*.  The requester
       is expected to subscribe to the issue corresponding
       to the  hosting request issue.

    7.  The requester will be responsible for fixing the
        failed hosting bug and will need to raise a new
        '[[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting request]]' to get the unit hosted.

    8.  Once the hosting is successful, the requester will
       be responsible for the verification of the hosted
       link.  If the hosting is not as expected, the
       requester should change the label from *Hosted* to
       *Reopened*.  The requester will also need to specify
       if he/she would like to revert to the previous hosted
       image.

    9.  An issue with *Reopened* label will by default host
        the repository and branch/tag as specified in the
        hosting request initially. However, if the requester
        has specifically requested a revert, the previously
        hosted image will be restored and issue will be
        labelled as *Reverted*.

    10.  If the requester wants to revert to any earlier
        branch/tag, a new '[[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting request]]' will need to be
        raised to get the unit hosted.

    11. Requester will be responsible for closing a hosting
        request issue by changing the issue status from Open
        to Closed when the issue is labelled as *Hosted* or
        *Reopened* or *Reverted* or *Not Approved*.

** Labels and Status of a Hosting Request

    At any given time a hosting issue should be marked with
    only one of the following labels. To change the label of
    an issue, the current label of the issue should be
    unchecked and the new label should be checked.

    *Hosted* :  This label indicates that the hosting request
    has been successful and the hosted url has been shared
    in the hosting request issue. This label is used only by
    the hosting team. 
   
    *Failed* : This label indicates that the hosting request
    has not been successful. This label is used only by the
    hosting team.

    *Reopened* : This label is used by the requester to
    indicate that the hosting url provided on a successful
    hosting of the hosting unit is not passing the validation.
   
    *Not Approved* : This label indicates that the hosting
    request issue raised by the requester was not approved
    by the Repository Owner.  This label is used only by the
    hosting team.
    
    *Reverted* :  This label indicates that the hosting request
    has been successfully revert to the previous hosted
    image. This label is used only by
    the hosting team. 
    
    Apart from the above mentioned labels a hosting request
    issue can either be in a closed or open status as
    provided by GitHub. 

    *Open* : This status indicates that a new hosting request
    issue has been raised and is waiting for the services of
    the hosting team. All issues are in this status when
    they are created on GitHub.

    *Closed* : This status indicates that a hosting request
    has been serviced by the hosting team and is labelled as
    *Hosted* or *Reopened* or *Reverted* or *Not Approved*.


* Build Process
  Once the hosting request is processed, it is time to build
  the lab/experiment.

  /Build/ is the process of translating and compiling
  source files to an executable or hostable web
  application 

** Files and parameters
  To build your application, the hosting team will look for
  two files at the top level of your cloned repository and
  try to construct the values of three variables.

    The files are 

     1. =descriptor.json= :: you are expected to populate
          this json file with values corresponding to
          values of various parameters, e.g, the build
          directory, dependency information, etc.

     2. =makefile= :: this is the file on which the default
                      build command is run. 

    The variables are 

        1. /build-dir/ : location of the files built for
                          deployment (defaults to =build=)

        2. /build-cmd/ : command to convert sources to the
           build files  (defaults to =make -k build=)

        3. /src-dir/ : location of the source files
           (defaults to the top level directory)
         
** Dependencies
    If your lab or experiment depends on other software
    (like databases, compilers, etc.), you need to specify
    them in the =dependencies= field.  

 
** The build workflow

These steps are implemented by the hosting team. 

     1. If the =descriptor.json= is present, read its
        parameters and collect values of =build-cmd=,
        =src-dir=, =build-dir= and =dependencies=.

     2. Install the dependencies if any.

     3. Run the =build-cmd=.

     4. Copy the  =build-dir= files into a hosting server. 

*The hosting team will not modify your sources in any way*.
   
  
** COMMENT Confirming the success or failure of hosting

   If the hosting is successful, the hosting issue will be
   marked as successfu  runs into trouble 
   The hosting process will result in a deployment with an
   accessible url.  The responsibility of testing the
   deployments will lie with the repository owner. The
   hosting team will be responsible for providing the link
   to the deployment.  The hosting team will not provide any
   testing environment. The repository owner will be
   responsible for ensuring that the hosting unit works as
   expected in their own specific testing environments.

* COMMENT Central Hosting Data  
  
  The following information will be stored at a central
  place for a quick reference by the hosting team:

    1. Hosting unit name

    2. Repository URL

    3. Currently hosted Branch/Tag

    4. Previously hosted Branch/Tag

    5. Date/Time of hosting

    Please follow the [[https://drive.google.com/open?id=1WXJA_1QkLg-5S0YYBRKyhEXwOgTSbKvm972Fy-thCUc][link]] for the Central Hosting Data.

* Flow Diagram of the Hosting Process

  The flow diagram depicting lifecycle of a hosting request is below:


  
 #+NAME:   fig:flowchart
 [[file:../images/hosting-process.png]]

 /[[https://drive.google.com/file/d/1gnG5Z3kkwXXZxT-zyB2CB9uZCgqAcdjE/view?usp=sharing][edit image]]/

* Roles and Responsibilities

#+NAME:   fig:flowchart
 [[file:../images/hosting-process-table.png]]

 /[[https://docs.google.com/drawings/d/1JfrZerBuMvTBFFfbhiMKKmePMNJ0GsbfTnsnvRbCLZw/edit][edit table]]/
 
* How to tag branches
   We recommend using [[https://semver.org/][Semantic Versioning]] to tag branches
   using the version number convention.  Each version is a
   combination of three numbers (MAJOR.MINOR.PATCH)
   separated by dots.  The changes to these numbers
   represent the following:
   
   1. MAJOR: A change incompatible with previous versions.
  
   2. MINOR: A backward compatible new feature.
 
   3. PATCH: A backward compatible bug fix.
  

* FAQ
  
 *Why should I use the Hosting Service?* 

  If you're building a virtual lab under the MHRD virtual
  labs project, you are strongly encouraged to host your lab
  on the common cloud.  Your lab will enjoy
  high-availability and it will save you the trouble of
  trying to host it yourself.  Your lab/experiment will take
  advantage of other services like analytics about the users
  and usage patterns of your Lab.

  *Do I get better website performance if I use Hosting
  Service?*
   
  The CPE team works continuously to improve the overall and
  individual Lab/Experiment performance based on the
  Analytics data.  You can compare the performance of the
  Labs/Experiments deployed through the hosting service to
  those deployed elsewhere.  If you use the Analytics
  service integration, the CPE team can individually target
  your Lab/Experiment for better performance.

  *Does the CPE team help me improve my Lab performance?*
 
  Yes.  The CPE team continuously works to improve the
  infrastructure in order to achieve best performance
  results for your Lab.  The CPE team does not improve your
  code, however, it can provide you guidelines and
  actionable performance improvement advice.

  *Does Hosting Service add a UI to my webpages?*

  No.  Hosting service does not alter your code in any way.
  However, we suggest that you use UI 3.0 (TODO: link to it)
  style sheet.  

  *Does the CPE team test my Lab for correctness as part of
  hosting?* 

  No.  We are not in a position to understand the semantics
  of your lab and therefore can not test except to ensure
  that your lab is correctly /hosted/.

  *Will the CPE team tell me about broken links as part of
  hosting?*

  No. Your code is a complete black box for the hosting
  team.  You are responsible for ensuring the completeness
  and correctness of your code and deployment.

* Glossary
  - *Repository* : The distributed version control system - git is
    used here. Every time the term repository or repo is used, it
    refers to a git repository. A repository is an on-disk data
    structure which stores metadata for a set of files and/or
    directory structure. The whole set of information in the
    repository may be duplicated on every user's system or may be
    maintained on a single server.

  - *Virtual Labs* : Virtual Labs is an initiative by MHRD
    under NMEICT. The objective of this project is to make
    engineering education engaging, enjoyable, immersive and
    online.

  - *Hosting team*: VLEAD at IIITH which provides Virtual
    Labs hosting service
