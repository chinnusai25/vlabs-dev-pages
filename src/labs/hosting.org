#+Title:  Virtual Labs Hosting Process
#+Author: VLEAD
#+Email: engg@vlabs.ac.in
#+DATE: [2020-01-08 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+LANGUAGE: en
#+OPTIONS: ^:nil
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t
#+OPTIONS: arch:headline author:t broken-links:nil c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil
#+OPTIONS: prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.3.2 (Org mode 9.1.9)

* Introduction

  [[http://vlab.co.in][Virtual Labs]] are online, interactive applications to
  support learning in science and engineering at the college
  level.  The Virtual Labs project is funded by the Govt. of
  India, Ministry of Human Resources and Development
  Project.

  Currently there are around 90 labs developed by various
  institutes in the consortium.

* Purpose

  The Virtual Labs are built through the effort of many free
  and open source development teams.  You can find the
  source repositories of many of the labs on the [[https://github.com/virtual-labs/][Github
  Virtual Labs]] website.  The labs are currently being
  centrally hosted on a cloud environment by the Virtual
  Labs hosting team (VLEAD) at IIIT Hyderabad.

  This document defines the process that you need to follow
  to have your lab deployed on the  cloud environment. 

* Motivation

  Centrally hosting virtual labs allows sharing of resources
  and facilitates accurate reporting of usage and
  performance.

* Audience
  This document is designed to help virtual lab developers
  understand the process and their role in getting their
  labs hosted.  

* Hosting

Hosting is the process of taking the sources of a lab and
hosting it on a web server.  The result of a successful
hosting is a URL of the hosted lab.

** What hosting provides


   - 1. Infrastructure :: You lab and its dependencies will
        be hosted on a common cloud environment so you don't
        need to worry about finding your own cloud
        infrastructure.
   
   - 2. Availability :: Your lab will be available on the
        web 24/7.
   
   - 3. Monitoring :: The usage and performance of your lab
                      will be monitored and any you will be
                      alerted about any performance
                      bottlenecks.

** What hosting does not provide

   - 1. Testing :: Your lab will be hosted by VLEAD as a
                   black box and will be hosted `as is'
                   after instrumenting it for analytics.
                   *Your lab's source code will not be
                   tested by the hosting team in any way!*
                   You will be responsible for ensuring that
                   the content and the simulations in your
                   lab perform as intended.  You will be
                   asked to confirm that your lab is
                   functioning correctly once it is hosted.

   - 2. Bug fixing ::  Your code may have bugs.  Any bug
                      fixes or enhancements or
                      implementation on the Lab/Experiment
                      will be done by you.  The hosting team
                      will not be able to do this.  The
                      hosting team will, however, monitor
                      the performance of your lab or
                      experiment.

   - 3. Approvals :: If you need any approval for quality
                     checks of your lab, you will need to do
                     that yourself.  The hosting team has no
                     way of obtaining it.

** Hosting terminology

   - 1. Building :: The process of converting source code to
                    executable code.

   - 2. Hosting :: The process of doing a build and
                   installing the executable onto  a virtual
                   labs server.   

   - 3. Deployment :: Another name for hosting. 

   - 4. Hosting Team :: the Virtual Labs team responsible
        for hosting a lab.  It is identified by its github
        id =virtual-labs=.

   - 5. [[https://github.com/virtual-labs/engineers-forum/issues][engineers-forum]] :: An open [[https://github.com][GitHub]] issues forum where
        all requests related to lab registration and hosting
        are made.

   - 7. Lab :: The virtual lab application to be hosted.
               Identified by the issue id of its
               registration request on the [[https://github.com/virtual-labs/engineers-forum/issues][engineers-forum]].

   - 8. Repository :: A GitHub project that holds the source
                      code of the lab.  The repository is
                      identified by its *url*.

   - 9. Owner    :: The person or team taking responsibility
                    for the lab.  An Owner is identified by
                    a Github username.  The virtual labs
                    hosting team will using this username to
                    communicate with the owner.

   - 10. Request :: An issue on the  [[https://github.com/virtual-labs/engineers-forum/issues][engineers-forum]] created
                   to either register or host a lab.  Each
                   request is identified by its github issue
                   id.

* Registering and making a hosting request
** Registering a lab

   A lab needs to be registered with the CPE before it can
   be hosted.  Lab registration is a one-time request per
   lab.  

   *A lab is identified with its registration request*.

   A lab's attributes are its name, repository and
   owner.

   A lab registration request is an issue on the
   [[https://github.com/virtual-labs/engineers-forum][engineers-forum]].  The template for registration is
   available on the [[https://github.com/virtual-labs/engineers-forum/issues/new/choose][issues template page]] on the
   engineers-forum.  Currently, there are two types of
   registration templates:

     1. [[https://github.com/virtual-labs/engineers-forum/issues/new?assignees=&labels=Registration%2C+Phase-3&template=phase-iii-registration.md&title=][Phase III lab/experiment]] registration template:

     2. [[https://github.com/virtual-labs/engineers-forum/issues/new?assignees=&labels=Registration&template=phase-ii-registration.md&title=Registration+Request+for+%3CHosting+Unit+Name%3E][Phase II lab]] registration template

     

** COMMENT Filling the lab/experiment descriptor 

The sources of the lab/experiment you wish to host, The
lab/experiment descriptor =descriptor.json= is available
[[https://github.com/virtual-labs/lab-deployment-specification/blob/master/spec-version-2.0][here]].  Default values of fields in the descriptor are filled
in.


** Hosting request

A hosting request is necessary before a registered lab can
be hosted.  Unlike a lab registration, however, a lab may be
hosted multiple times.  For example, each time a lab is
updated, it will need to be hosted again.

** Raising a hosting request
A hosting request made by creating an issue using the
[[https://github.com/virtual-labs/engineers-forum/issues/new?assignees=&labels=Hosting&template=hosting-request.md&title=Hosting+Request+for+<Hosting+Unit+or+Lab+Name>][hosting request template]].

This hosting issue will be a single source of truth for that
hosting request.  All communication related to the hosting
will be recorded on the hosting request.  So it is best to
[[https://help.github.com/en/enterprise/2.20/user/github/receiving-notifications-about-activity-on-github/subscribing-to-and-unsubscribing-from-notifications][subscribe to this issue]] to receive notifications when your
request is handled.

A hosting request has the following information:

  1. The lab registration id.

  2. A git tag that identifies the version of the source
     repository.

* Lifecycle of a hosting request
** Lifecycle of a Hosting Request
    
    1. The Owner raises a hosting request as an issue.  The
       owner is expected to [[https://help.github.com/en/enterprise/2.20/user/github/receiving-notifications-about-activity-on-github/subscribing-to-and-unsubscribing-from-notifications][subscribe to the issue]] to
       follow responses to the request.

    2. The Hosting team examines the request.  If the
       request is ill-formed or is not from a lab owner, or
       the build process fails, for example, due to missing
       dependencies, a reply to the issue is added.  The
       issue is labeled as *Failed*.

    3. On a successful hosting, the Hosting Team responds to
       the hosting request with the url of the hosted lab.
       It marks the request issue *Hosted*.

    4. For a request marked *Failed*, the owner closes the
       current request by marking it *Closed*, fixes any
       bugs in the sources, and raises a new [[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting
       request]]. 

    5. For a request marked *Hosted*, the owner verifies the
       hosted link and checks if the lab opens correctly.
       If the hosting is not as expected, the owner responds
       on the same issue, explaining the problem with the
       hosting and labels the issue as *Reopened*.

    9. When an issue is *Reopened*, the hosting team will
       host the repository and branch/tag as specified in
       the hosting request initially.  However, if the Owner
       has specifically requested a revert, the previous
       successful hosting will be restored.  The issue will
       be labelled as *Reverted*.

    10. If the owner wants the lab restored to any earlier
        tag other than the last one, a new '[[https://github.com/virtual-labs/engineers-forum/issues/new/choose][hosting request]]'
        will need to be raised to get the unit hosted.

    11. Owner will close a hosting request issue by changing
        its status to *Closed* when the issue is labelled as
        *Hosted*, *Reopened* or *Reverted*. 


|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|     |            |                               |                |           |                          |                 |
| No. | Issue      | Pre-condition                 | Actor          | Action    | Supporting Info          | Actor changes   |
|     | status     |                               |                | taken by  | provided by Actor        | issue Status to |
|     |            |                               |                | Actor     |                          |                 |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  1. | n/a        | Lab is registered             | Owner          | new issue | Hosting request          | *Open*          |
|     |            |                               |                |           | paramaters               | (automatically  |
|     |            |                               |                |           |                          | done by Github) |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  2. | *Open*     | Hosting request is            | =virtual-labs= | reply     | Reasons why request is   | *Failed*        |
|     |            | ill-formed                    |                |           | ill-formed               |                 |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  3. | *Open*     | Request is well-formed  but   | =virtual-labs= | reply     | Reasons why build failed | *Failed*        |
|     |            | Build process has failed      |                |           |                          |                 |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  4. | *Open*     | Hosting has succeeded         | =virtual-labs= | reply     | URL of hosted lab        | *Hosted*        |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  5. | *Failed*   |                               | Owner          | reply     | Acknowledgement          | *Closed*        |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  6. | *Hosted*   | Hosting is satisfactory       | Owner          | reply     | Acknowledgement          | *Closed*        |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  7. | *Hosted*   | Hosting not satisfactory      | Owner          | reply     | Reason why lab is        | *Reopened*      |
|     |            |                               |                |           | hosting unsatisfactory.  |                 |
|     |            |                               |                |           |                          |                 |
|     |            |                               |                |           | Whether revert to        |                 |
|     |            |                               |                |           | previous version         |                 |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  8. | *Reopened* | Owner reply specifies revert  | =virtual-labs= | reply     | URL of hosted lab        | *Reverted*      |
|     |            | and reverted version rehosted |                |           |                          |                 |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
|  9. | *Reopened* | Owner reply does not          | =virtual-labs= | reply     | URL of hosted lab        | *Hosted*        |
|     |            | specify revert and            |                |           |                          |                 |
|     |            | lab is rehosted               |                |           |                          |                 |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
| 10. | *Reopened* | Owner reply does not          | =virtual-labs= | reply     | Reasons why build failed | *Failed*        |
|     |            | specify revert and            |                |           |                          |                 |
|     |            | lab hosting unsuccessful      |                |           |                          |                 |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|
| 11. | *Reverted* |                               | Owner          | reply     |                          | *Closed*        |
|-----+------------+-------------------------------+----------------+-----------+--------------------------+-----------------|





** Labels and Status of a Hosting Request

    At any given time a hosting issue should be marked with
    only one of the following labels. To change the label of
    an issue, the current label of the issue should be
    unchecked and the new label should be checked.

    *Hosted* :  This label indicates that the hosting request
    has been successful and the hosted url has been shared
    in the hosting request issue. This label is used only by
    the hosting team. 
   
    *Failed* : This label indicates that the hosting request
    has not been successful. This label is used only by the
    hosting team.

    *Reopened* : This label is used by the Owner to
    indicate that the hosting url provided on a successful
    hosting of the hosting unit is not passing the validation.
    
    *Reverted* :  This label indicates that the hosting request
    has been successfully revert to the previous hosted
    image. This label is used only by
    the hosting team. 
    
    Apart from the above mentioned labels a hosting request
    issue can either be in a closed or open status as
    provided by GitHub. 

    *Open* : This status indicates that a new hosting request
    issue has been raised and is waiting for the services of
    the hosting team. All issues are in this status when
    they are created on GitHub.

    *Closed* : This status indicates that a hosting request
    has been serviced by the hosting team and is labelled as
    *Hosted* or *Reopened* or *Reverted* or *Not Approved*.


* Build Process
  Once the hosting request is processed, it is time to build
  the lab/experiment.

  /Build/ is the process of translating and compiling
  source files to an executable or hostable web
  application 

** Files and parameters
  To build your application, the hosting team will look for
  two files at the top level of your cloned repository and
  try to construct the values of three variables.

    The files are 

     1. =descriptor.json= :: you are expected to populate
          this json file with values corresponding to
          values of various parameters, e.g, the build
          directory, dependency information, etc.

     2. =makefile= :: this is the file on which the default
                      build command is run. 

    The variables are 

        1. /build-dir/ : location of the files built for
                          deployment (defaults to =build=)

        2. /build-cmd/ : command to convert sources to the
           build files  (defaults to =make -k build=)

        3. /src-dir/ : location of the source files
           (defaults to the top level directory)
         
** Dependencies
    If your lab or experiment depends on other software
    (like databases, compilers, etc.), you need to specify
    them in the =dependencies= field.  

 
** The build workflow

These steps are implemented by the hosting team. 

     1. If the =descriptor.json= is present, read its
        parameters and collect values of =build-cmd=,
        =src-dir=, =build-dir= and =dependencies=.

     2. Install the dependencies if any.

     3. Run the =build-cmd=.

     4. Copy the  =build-dir= files into a hosting server. 

*The hosting team will not modify your sources in any way*.
   
  
** COMMENT Confirming the success or failure of hosting

   If the hosting is successful, the hosting issue will be
   marked as successfu  runs into trouble 
   The hosting process will result in a deployment with an
   accessible url.  The responsibility of testing the
   deployments will lie with the repository owner. The
   hosting team will be responsible for providing the link
   to the deployment.  The hosting team will not provide any
   testing environment. The repository owner will be
   responsible for ensuring that the hosting unit works as
   expected in their own specific testing environments.

* COMMENT Central Hosting Data  
  
  The following information will be stored at a central
  place for a quick reference by the hosting team:

    1. Hosting unit name

    2. Repository URL

    3. Currently hosted Branch/Tag

    4. Previously hosted Branch/Tag

    5. Date/Time of hosting

    Please follow the [[https://drive.google.com/open?id=1WXJA_1QkLg-5S0YYBRKyhEXwOgTSbKvm972Fy-thCUc][link]] for the Central Hosting Data.

* COMMENT Flow Diagram of the Hosting Process

  The flow diagram depicting lifecycle of a hosting request is below:


  
 #+NAME:   fig:flowchart
 [[file:../images/hosting-process.png]]

 /[[https://drive.google.com/file/d/1gnG5Z3kkwXXZxT-zyB2CB9uZCgqAcdjE/view?usp=sharing][edit image]]/

* Roles and Responsibilities

#+NAME:   fig:flowchart
 [[file:../images/hosting-process-table.png]]

 /[[https://docs.google.com/drawings/d/1JfrZerBuMvTBFFfbhiMKKmePMNJ0GsbfTnsnvRbCLZw/edit][edit table]]/
 
* Tagging conventions

   We recommend using [[https://semver.org/][Semantic Versioning]] to tag
   repositories using the version number convention.  Each
   version is a combination of three numbers
   (MAJOR.MINOR.PATCH) separated by dots.  The changes to
   these numbers represent the following:
   
   1. MAJOR: A change incompatible with previous versions.
  
   2. MINOR: A backward compatible new feature.
 
   3. PATCH: A backward compatible bug fix.
  

* FAQ
  
 *Why should I use the Hosting Service?* 

  If you're building a virtual lab under the MHRD virtual
  labs project, you are strongly encouraged to host your lab
  on the common cloud.  Your lab will enjoy *high
  availability* and it will save you the trouble of trying
  to host it yourself.  Your lab/experiment will take
  advantage of other services like *analytics* about the
  users and usage patterns of your Lab.

  *Will hosting on the central platform team help me improve
  my Lab's performance?*
 
  Quite likely.  Virtual Labs employs commercial grade
  hosting services. The hosting plans are continuously
  negotiated to make them cheaper and faster.  The Virtual
  Labs hosting team will not improve your code for better
  performance.  However, it will provide you guidelines and
  actionable performance improvement advice if it notices
  poor performance of your hosted unit.

  *Does Hosting Service add a UI to my webpages?*

  No.  Hosting service does not alter your code in any way.
  However, we suggest two options if you want to develop new
  experiments: 

      1. use the UI 3.0 style sheet.
      2. use the IIT Bombay development process

  *Does the CPE team test my Lab for correctness as part of
  hosting?* 

  No.  We are not in a position to understand the semantics
  of your lab and therefore can not test except to ensure
  that your lab is correctly /hosted/.

  *Will the CPE team tell me about broken links as part of
  hosting?*

  No. Your code is a complete black box for the hosting
  team.  You are responsible for ensuring the completeness
  and correctness of your code and deployment.

* Glossary
  - *Repository* : The distributed version control system - git is
    used here. Every time the term repository or repo is used, it
    refers to a git repository. A repository is an on-disk data
    structure which stores metadata for a set of files and/or
    directory structure. The whole set of information in the
    repository may be duplicated on every user's system or may be
    maintained on a single server.

  - *Virtual Labs* : Virtual Labs is an initiative by MHRD
    under NMEICT. The objective of this project is to make
    engineering education engaging, enjoyable, immersive and
    online.

  - *Hosting team*: VLEAD at IIITH which provides Virtual
    Labs hosting service
